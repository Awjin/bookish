pre.highlight {
    /*
     *  .c  - Comment           - Single ligne comments
     *  .cm - Comment.Multiline - Mutliline comments
     *  .c1 - Comment.Single    - Comments that end at the end of the line
     *  .ca - Comment.Special   - Special data in comments such as @license in Javadoc
     *
     *  .cp - Comment.Preproc   - Preprocessor comments such as <% %> in ERb
     */
    .c, .cm, .c1, .cs {
        color: $color-lightest;
        font-style: italic;
    }

    .cp {
        font-weight: bold;
    }


    /*
     *  .err - Error - Lexer errors
     */
    .err {
        color: $color-lightest;
    }


    /*
     *  .g  - Generic            - Unstyled token
     *
     *  .gp - Generic.Prompt     - Marked as a command prompt
     *
     *  .gr - Generic.Error      - Token value as an error message
     *  .gd - Generic.Deleted    - Token value as deleted
     *  .gh - Generic.Heading    - Token value as a headline
     *  .gi - Generic.Inserted   - Token value as inserted
     *  .gl - Generic.Lineno     - Line numbers
     *  .go - Generic.Output     - Marked as a program output
     *  .gu - Generic.Subheading - Marked as a subheadline
     *  .gt - Generic.Traceback  - Mark the token as a part of an error traceback
     *
     *  .ge - Generic.Emph       - Token value as emphasized
     *
     *  .gs - Generic.Strong     - Mark the token value as bold (for rst lexer)
     */
    .gp {
        font-weight: bold;
    }

    .gr, .gd, .gh, .gi, .gl, .go, .gu, .gt {
        color: $color-lightest;
    }

    .ge {
        font-style: italic;
    }

    .gs {
        font-weight: bold;
    }


    /*
     *  .k  - Keyword             - Any keyword
     *  .kc - Keyword.Constant    - Keywords that are constants
     *  .kd - Keyword.Declaration - Keywords used for variable declaration (e.g. var in javascript)
     *  .kn - Keyword.Namespace   - Keywords used for namespace declarations
     *  .kp - Keyword.Pseudo      - Keywords that aren't really keywords
     *  .kr - Keyword.Reserved    - Keywords which are reserved (such as end in Ruby)
     *  .kt - Keyword.Type        - Keywords wich refer to a type id (such as int in C)
     */
    .k, .kc, .kd, .kn, .kp, .kr, .kt {
        font-weight: bold;

    }


    /*
     *  .l  - Literal                     - Any literal (if not further defined)
     *  .ld - Literal.Date                - Date literals
     *  .s  - Literal.String              - String literals
     *  .sb - Literal.String.Backtick     - String enclosed in backticks
     *  .sc - Literal.String.Char         - Token type for single characters
     *  .sd - Literal.String.Doc          - Documentation strings (such as in Python)
     *  .s2 - Literal.String.Double       - Double quoted strings
     *  .se - Literal.String.Escape       - Escaped sequences in strings
     *  .sh - Literal.String.Heredoc      - For "heredoc" strings (e.g. in Ruby)
     *  .si - Literal.String.Interpol     - For interpoled part in strings (e.g. in Ruby)
     *  .sx - Literal.String.Other        - Token type for any other strings (for example %q{foo} string constructs in Ruby)
     *  .sr - Literal.String.Regex        - Regular expressions literals
     *  .s1 - Literal.String.Single       - Single quoted strings
     *  .ss - Literal.String.Symbol       - Symbols (such as :foo in Ruby)
     *  .m  - Literal.Number              - Any number literal (if not further defined)
     *  .mf - Literal.Number.Float        - Float numbers
     *  .mh - Literal.Number.Hex          - Hexadecimal numbers
     *  .mi - Literal.Number.Integer      - Integer literals
     *  .il - Literal.Number.Integer.Long - Long interger literals
     *  .mo - Literal.Number.Oct          - Octal literals
     */


    /*
     *  .n  - Name                   - Variable/function names
     *  .na - Name.Attribute         - Attributes (in HTML for instance)
     *  .nb - Name.Builtin           - Builtin names which are available in the global namespace
     *  .bp - Name.Builtin.Pseudo    - Builtin names that are implicit (such as self in Ruby)
     *  .no - Name.Constant          - For constants
     *  .nd - Name.Decorator         - For decorators in languages such as Python or Java
     *  .ni - Name.Entity            - Token for entitites such as &nbsp; in HTML
     *  .nf - Name.Function          - Function names
     *  .py - Name.Property          - Token for properties
     *  .nl - Name.Label             - For label names
     *  .nn - Name.Namespace         - Token for namespaces
     *  .nx - Name.Other             - For other names
     *  .nt - Name.Tag               - Tag mainly for markup such as XML or HTML
     *  .nv - Name.Variable          - Token for variables
     *  .vc - Name.Variable.Class    - Token for class variables (e.g. @@var in Ruby)
     *  .vg - Name.Variable.Global   - For global variables (such as $LOAD_PATH in Ruby)
     *  .vi - Name.Variable.Instance - Token for instance variables (such as @var in Ruby)
     *
     *  .nc - Name.Class             - For class declaration
     *  .ne - Name.Exception         - Exceptions and errors (e.g. ArgumentError in Ruby)
     */
    .nc, .ne {
        font-weight: bold;
    }


    /*
     *  .o  - Operator      - Operators (commonly +, -, /, *)
     *  .ow - Operator.Word - Word operators (e.g. and)
     */
    .o, .ow {
        font-weight: bold;
    }


    /*
     *  .p - Punctuation - Punctuation which is not an operator
     */


    /*
     *  .w -.Whitespace - Specially highlighted whitespace
     */
    .w {
        color: $color-lightest;
    }


    /*
     *  .x - Other - Token for data not matched by a parser (e.g. HTML markup in PHP code)
     */
}
